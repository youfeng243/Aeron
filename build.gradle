/*
 * Copyright 2014 - 2015 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

defaultTasks 'clean', 'build', 'shadowJar', 'install'

def aeronGroup = 'uk.co.real-logic'
def aeronVersion = '0.9.2-SNAPSHOT'

group = aeronGroup
version = aeronVersion
ext.isReleasedVersion = !version.endsWith("SNAPSHOT")

ext {
    group = aeronGroup
    version = aeronVersion

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'Aeron'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'Efficient reliable UDP unicast, multicast, and IPC transport protocol.'
    url = 'https://github.com/real-logic/Aeron'

    scm {
        connection = 'scm:git:https://github.com/real-logic/Aeron.git'
        developerConnection = 'scm:git:https://github.com/real-logic/Aeron.git'
        url = 'https://github.com/real-logic/Aeron.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'tmontgomery'
            name = 'Todd L. Montgomery'
            email = 'tmont@nard.net'
            url = 'https://github.com/tmontgomery'
        }
        developer {
            id = 'mjpt777'
            name = 'Martin Thompson'
            email = 'mjpt777@gmail.com'
            url = 'https://github.com/mjpt777'
        }
        developer {
            id = 'RichardWarburton'
            name = 'Richard Warburton'
            email = 'richard.warburton@gmail.com'
            url = 'https://github.com/RichardWarburton'
        }
    }
}

configurations {
    shadow
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    //apply plugin: 'checkstyle'
    apply plugin: 'signing'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'eclipse'

    group = aeronGroup
    version = aeronVersion

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2"
        }
    }

    dependencies {
        //checkstyle "com.github.sevntu.checkstyle:sevntu-checks:1.17.1"

        testCompile(
                'org.hamcrest:hamcrest-all:1.3',
                'junit:junit:4.12',
                'org.mockito:mockito-all:1.10.19')
    }

    /*
    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
        toolVersion = "6.14.1"
    }
    */

    test {
        testLogging {
            //events 'passed', 'skipped', 'failed'
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println("Results: ${result.resultType}" +
                            " (${result.testCount} tests, ${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
                }
            }
        }
    }

    javadoc {
        title = '<h1>Aeron Transport Protocol</h1>'

        options.bottom = '<i>Copyright &#169; 2014 - 2015 Real Logic Ltd. All Rights Reserved.</i>'
        options.addStringOption('XDignore.symbol.file', '-quiet')
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    signing {
        required { isReleasedVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
        sign configurations.shadow
    }
}

project(':aeron-client') {
    dependencies {
        compile 'uk.co.real-logic:Agrona:0.4.10'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-driver') {
    apply plugin: 'application'

    mainClassName = 'uk.co.real_logic.aeron.driver.MediaDriver'

    dependencies {
        compile project(':aeron-client')
        testCompile project(':aeron-client')
    }

    test {
        systemProperties('aeron.event.log': System.properties['aeron.event.log'])
    }

    run {
        systemProperties(System.properties)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    build.doLast {
        tasks.distZip.execute()
    }
}

project(':aeron-samples') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver'), 'org.hdrhistogram:HdrHistogram:2.1.8'
    }

    shadowJar {
        archiveName = 'samples.jar'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-system-tests') {
    dependencies {
        compile project(':aeron-client'), project(':aeron-driver')
        testCompile project(path: ':aeron-client', configuration: 'tests')
    }

    test {
        systemProperties('aeron.event.log': System.properties['aeron.event.log'])
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.test.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-all') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver')
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from project(':aeron-client').sourceSets.main.allSource
        from project(':aeron-driver').sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from project(':aeron-client').javadoc.destinationDir
        from project(':aeron-driver').javadoc.destinationDir
    }

    shadowJar {
        classifier = ''
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

task uploadToMavenCentral {
    dependsOn 'aeron-client:uploadArchives', 'aeron-driver:uploadArchives', 'aeron-samples:uploadArchives',
            'aeron-system-tests:uploadArchives', 'aeron-all:uploadArchives', 'aeron-all:uploadShadow'
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
